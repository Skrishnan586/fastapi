pipeline {
    agent any

    stages {
        stage('GIT SCM checkout') {
            steps {
                git 'https://github.com/Skrishnan586/fastapi.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'sonarscanner4'
                    withSonarQubeEnv('sonar-pro') {
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=python-test"
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                sleep(time: 35, unit: 'SECONDS')
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true, credentialsId: 'sonar'
                }
            }
            post {
                failure {
                    echo 'Sending email notification from Jenkins'
                    step([$class: 'Mailer',
                          notifyEveryUnstableBuild: true,
                          recipients: emailextrecipients([[$class: 'CulpritsRecipientProvider'],
                                                          [$class: 'RequesterRecipientProvider']])])
                }
            }
        }

        stage('Build Docker Image and push') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'dockerPass', variable: 'dockerPassword')]) {
                        sh "docker login -u harikrishnan586 -p ${dockerPassword}"
                        sh "docker build -t harikrishnan586/fastapi:latest ."
                        sh "docker push harikrishnan586/fastapi:latest"
                        sh "docker rmi harikrishnan586/fastapi:latest"
                    }
                }
            }
        }

        stage('Notification - Slack') {
            steps {
                script {
                    def status = currentBuild.currentResult
                    def slackChannel = '#python-test' // Replace with the actual Slack channel name

                    slackSend(
                        color: status == 'SUCCESS' ? 'good' : 'danger',
                        channel: slackChannel, // Corrected the variable name here
                        message: "Build ${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})",
                        teamDomain: 'devops-5a15321', // Replace with your Slack workspace domain
                        tokenCredentialId: 'slack-token', // Replace with the ID of the Jenkins credential that stores your Slack webhook URL
                    )
                }
            }
        }

        stage('Approval - Deploy on k8s') {
            steps {
                input 'Approve for KOPS Deploy'
            }
        }

        stage('Deploy on KOPS-k8s') {
            steps {
                script {
                    withKubeCredentials(kubectlCredentials: [[credentialsId: 'k8s', namespace: 'default']]) {
                        sh 'kubectl apply -f mainservice.yaml'
                    }
                }
            }
        }
    }
}
